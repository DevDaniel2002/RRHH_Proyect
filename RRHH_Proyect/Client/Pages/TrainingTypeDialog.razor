<MudDialogContent>
    <div class="form-group">
        <label for="type">Tipo:</label>
        <MudTextField @bind-Value="CurrentTrainingType.Type" />
    </div>
</MudDialogContent>

<MudDialogActions>
    <MudButton Color="Color.Primary" @onclick="SaveTrainingType">Guardar</MudButton>
    <MudButton Color="Color.Secondary" @onclick="Cancel">Cancelar</MudButton>
</MudDialogActions>

@code {
    [Parameter] public TrainingTypes CurrentTrainingType { get; set; }
    [Parameter] public bool IsEditMode { get; set; }

    [Inject]
    private IDialogService DialogService { get; set; }

    [Inject]
    private HttpClient HttpClient { get; set; }

    private DialogReference dialogReference;

    private async Task SaveTrainingType()
    {
        if (CurrentTrainingType != null)
        {
            if (IsEditMode)
            {
                await EditTrainingType();
            }
            else
            {
                await AddTrainingType();
            }
        }
        else
        {
            Console.WriteLine("CurrentTrainingType is null");
        }

        dialogReference?.Close();
    }


    private async Task AddTrainingType()
    {
        try
        {
            await HttpClient.PostAsJsonAsync("api/TrainingType", CurrentTrainingType);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al agregar tipo de entrenamiento: {ex.Message}");
        }
    }

    private async Task EditTrainingType()
    {
        try
        {
            await HttpClient.PutAsJsonAsync($"api/TrainingType/{CurrentTrainingType.Id}", CurrentTrainingType);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al editar tipo de entrenamiento: {ex.Message}");
        }
    }

    private void Cancel()
    {
        dialogReference?.Close();
    }

    public void SetDialogReference(DialogReference reference)
    {
        dialogReference = reference;
    }
}
