@page "/training"
@using MudBlazor
@using MudBlazor.Components

<MudContainer>

    <h3 class="mt-2">Competencias</h3>

        <MudButton Icon="Icons.Add" Variant="Variant.Filled" Color="Color.Primary" OnClick="AddNewTraining" Class="mt-2 mb-2">Nuevo Registro</MudButton>

    @if (trainings == null)
    {
        <p>Loading....</p>
    }
    else
    {
        <MudTable Items="@trainings.Take(6)" Hover="true" Loading="@_loading" LoadingProgressColor="Color.Info">
            <HeaderContent>
                <MudTh>Id</MudTh>
                <MudTh>Descripcion</MudTh>
                <MudTh>Tipo</MudTh>
                <MudTh>Desde:</MudTh>
                <MudTh>Hasta:</MudTh>
                <MudTh>Institucion</MudTh>
                <MudTh></MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Id">@context.Id</MudTd>
                <MudTd DataLabel="Description">@context.Description</MudTd>
                <MudTd DataLabel="TrainingTypeId">@context.TrainingType.Type</MudTd>
                <MudTd DataLabel="DateFrom">@context.DateFrom</MudTd>
                <MudTd DataLabel="DateTo">@context.DateTo</MudTd>
                <MudTd DataLabel="Institution">@context.Institution</MudTd>
                <MudTd>
                    <MudButton Icon="Icons.Edit"  Color="Color.Primary" OnClick="() => EditTraining(context)">Editar</MudButton>
                    <MudButton Icon="Icons.Delete"  Color="Color.Error" OnClick="() => ShowDeleteConfirmationModal(context.Id)">Eliminar</MudButton>
                </MudTd>
            </RowTemplate>
        </MudTable>


        <MudDialog @bind-Visible="@showModal">
            <TitleContent>
                <h4 class="mt-2">
                    @if (isEditMode)
                    {
                        <text>Editar Registro</text>
                    } 
                    else
                    {
                        <text>Nuevo Registro</text>    
                    }
                </h4>
            </TitleContent>
            <DialogContent>
                <div class="form-group">
                    <label for="Description">Descripción</label>
                    <MudTextField @bind-Value="currentTrainings.Description"></MudTextField>
                </div>
                <div class="form-group">
                    <label for="DateFrom">Desde:</label>
                    <MudDatePicker @bind-Date="currentTrainings.DateFrom" />
                </div>

                <div class="form-group">
                    <label for="DateTo">Hasta:</label>
                    <MudDatePicker @bind-Date="currentTrainings.DateTo"></MudDatePicker>
                </div>
                <div class="form-group">
                    <label for="Institution">Institución</label>
                    <MudTextField @bind-Value="currentTrainings.Institution"></MudTextField>
                </div>
                <div class="form-group">
                    <label for="TrainingTypeId">Tipo</label>
                    <!-- Puedes usar un MudSelect o MudAutocomplete según tus necesidades -->
                    <MudAutocomplete @bind-Value="currentTrainings.TrainingTypeId" Data="@trainingTypes" Label="Tipo" />
                </div>
            </DialogContent>
        </MudDialog>

        <MudDialog @bind-Visible="@showDeleteConfirmationModal">
            <TitleContent>
                <h4 class="mt-2">Confirmar Eliminacion</h4>
            </TitleContent>
            <DialogContent>
                <p>¿Estás seguro de que desea eliminar este registre?</p>
            </DialogContent>
            <DialogActions>
                <MudButton Color="Color.Error" @onclick="DeleteTrainingConfirmed">Sí, Eliminar</MudButton>
                <MudButton Color="Color.Secondary" @onclick="CloseDeleteConfirmationModal">Cancelar</MudButton>
            </DialogActions>
        </MudDialog>
    }
</MudContainer>

@code {

    private bool _loading;
    private IEnumerable<Trainings> trainings = new List<Trainings>();
    private IEnumerable<TrainingTypes> trainingTypes = new List<TrainingTypes>();
    Trainings currentTrainings;
    bool showModal = false;
    bool isEditMode = false;
    bool showDeleteConfirmationModal = false;
    int trainingIdToDelete;

    [Inject]
    private HttpClient HttpClient { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await GetAllTraining();
        await GetTrainingTypes();

    }

    private async Task GetAllTraining()
    {
        trainings = await HttpClient.GetFromJsonAsync<List<Trainings>>("api/Trainings");
    }

    private async Task GetTrainingTypes()
    {
        trainingTypes = await HttpClient.GetFromJsonAsync<List<TrainingTypes>>("api/TrainingTypes");
    }

    private void AddNewTraining()
    {
        currentTrainings = new Trainings();
        isEditMode = false;
        showModal = true;
    }

    private void EditTraining(Trainings training)
    {
        currentTrainings = training;
        isEditMode = true;
        showModal = true;

    }

    public async Task SaveTraining()
    {
        if (isEditMode)
        {
            await HttpClient.PutAsJsonAsync("api/Trainings/" + currentTrainings.Id, currentTrainings);
        }
        else
        {
            await HttpClient.PostAsJsonAsync("api/Trainings", currentTrainings.Id);
        }

        await GetAllTraining();
        CloseModal();
    }

    public async Task DeleteTrainingConfirmed()
    {
        await HttpClient.DeleteAsync("api/TrainingType/" + trainingIdToDelete);
        await GetAllTraining();
        CloseDeleteConfirmationModal();
    }

    private void CloseModal()
    {
        showModal = false;
    }

    private void ShowDeleteConfirmationModal(int id)
    {
        trainingIdToDelete = id;
        showDeleteConfirmationModal = true;
    }

    private void CloseDeleteConfirmationModal()
    {
        showDeleteConfirmationModal = false;
    }

}
