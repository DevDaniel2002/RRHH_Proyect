@page "/trainingtypes"
@using MudBlazor
@using MudBlazor.Components
@using MudBlazor.Services


<MudContainer>
    <h3>Tipos de Competencias</h3>

    <MudTable Items="@trainingTypes">
        <HeaderContent>
            <th>ID</th>
            <th>Tipo</th>
            <th></th>
        </HeaderContent>
        <RowTemplate>
            <td>@context.Id</td>
            <td>@context.Type</td>
            <td>
                <MudButton Color="Color.Warning" Variant="Variant.Filled" @onclick="() => EditTrainingType(context)" StartIcon="@Icons.Material.Filled.Edit">Editar</MudButton>
                <MudButton Color="Color.Error" Variant="Variant.Filled" @onclick="() => ShowDeleteConfirmationModal(context.Id)" StartIcon="@Icons.Material.Filled.Delete">Eliminar</MudButton>
            </td>
        </RowTemplate>
    </MudTable>

    <MudButton Color="Color.Primary" Class="mt-2 mb-2" @onclick="() => ShowTrainingTypeDialog(false)">Añadir Tipo</MudButton>

    <MudDialogProvider />

    @code {
        List<TrainingTypes> trainingTypes;
        TrainingTypes currentTrainingType;
        bool isEditMode = false;
        int trainingTypeIdToDelete;
        DialogReference dialogReference;

        private TaskCompletionSource<bool> dialogClosedTaskCompletionSource;


        [Inject]
        private IDialogService DialogService { get; set; }

        [Inject]
        private HttpClient HttpClient { get; set; }

        protected override async Task OnInitializedAsync()
        {
            await GetAllTrainingTypes();
        }

        private async Task GetAllTrainingTypes()
        {
            trainingTypes = await HttpClient.GetFromJsonAsync<List<TrainingTypes>>("api/TrainingType");
        }

        private void EditTrainingType(TrainingTypes trainingType)
        {
            currentTrainingType = trainingType;
            isEditMode = true;

            var parameters = new DialogParameters();
            parameters.Add("CurrentTrainingType", currentTrainingType);
            parameters.Add("IsEditMode", isEditMode);

            var options = new DialogOptions { MaxWidth = MaxWidth.Small };

            var dialogReference = DialogService.Show<TrainingTypeDialog>("Editar Tipo", parameters, options);

            _ = HandleDialogResult(dialogReference);
        }

        private async Task HandleDialogResult(IDialogReference dialogReference)
        {
            var result = await dialogReference.Result;

            if (!result.Cancelled)
            {
                await GetAllTrainingTypes();
            }
        }

        private async Task AddTrainingType()
        {
            currentTrainingType = new TrainingTypes();
            isEditMode = false;

            var parameters = new DialogParameters();
            parameters.Add("CurrentTrainingType", currentTrainingType);
            parameters.Add("IsEditMode", isEditMode);

            var options = new DialogOptions { MaxWidth = MaxWidth.Small };

            var dialogReference = DialogService.Show<TrainingTypeDialog>("Añadir Tipo", parameters, options);

            _ = HandleDialogResult(dialogReference);
        }

        private void ShowDeleteConfirmationModal(int id)
        {
            trainingTypeIdToDelete = id;

            var options = new DialogOptions { MaxWidth = MaxWidth.Small };

            // DialogService.Show<DeleteConfirmationDialog>("Confirmar Eliminación", options);
        }
        
        private async Task ShowTrainingTypeDialog(bool isEditMode)
        {
            currentTrainingType = new TrainingTypes();
            this.isEditMode = isEditMode;

            var parameters = new DialogParameters();
            parameters.Add("CurrentTrainingType", currentTrainingType);
            parameters.Add("IsEditMode", isEditMode);

            var options = new DialogOptions { MaxWidth = MaxWidth.Small };

            dialogClosedTaskCompletionSource = new TaskCompletionSource<bool>();

            var dialogReference = DialogService.Show<TrainingTypeDialog>("Añadir Tipo", parameters, options);

            await dialogClosedTaskCompletionSource.Task;

            await GetAllTrainingTypes();
        }



 }
 
</MudContainer>
