@page "/TrainingList"
@inject HttpClient HttpClient
@inject IDialogService DialogService
@inject NavigationManager NavigationManager

<MudContainer MaxWidth="MaxWidth.ExtraExtraLarge">
    <MudText Typo="Typo.h3" Class="pt-4">Tipo de Competencias</MudText>

    <MudTable Items="TrainingsList.FindAll(x => x.IsActive == true)" Hover="true" Striped="true" OnRowClick="(TableRowClickEventArgs<Trainings> args) => RowClicked(args)">
        <ToolBarContent>
            <MudText Typo="Typo.h6">Competencia</MudText>
        </ToolBarContent>
        <HeaderContent>
            <MudTh>Id</MudTh>
            <MudTh>Descripcion</MudTh>
            <MudTh>Tipo de Competencia</MudTh>
            <MudTh>Desde</MudTh>
            <MudTh>Hasta</MudTh>
            <MudTh>Institucion</MudTh>
            <MudTh>Candidato</MudTh>
            <MudTh></MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd>@context.Id</MudTd>
            <MudTd>@context.Description</MudTd>
            <MudTd>@context.TrainingType.Type</MudTd>
            <MudTd>@context.DateFrom</MudTd>
            <MudTd>@context.DateTo</MudTd>
            <MudTd>@context.Institution</MudTd>
            <MudTd>@context.Candidate.Name</MudTd>
            <MudTd> <MudFab Color="Color.Error" Size="Size.Small" StartIcon="@Icons.Material.Filled.Delete" OnClick="() => DeleteTraining(context)" /></MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager />
        </PagerContent>
    </MudTable>

</MudContainer>


@code {
    public List<Trainings> TrainingsList = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await GetAllTrainings();
        }
        catch (Exception ex)
        {
            var parameter = new DialogParameters();
            parameter.Add("Message", ex.Message);
            var dialog = DialogService.Show<ErrorDialog>("Competencia", parameter);
            var resultDialog = await dialog.Result;

        }
    }

    private async Task GetAllTrainings()
    {
        var result = await HttpClient.GetFromJsonAsync<List<Trainings>>("api/Trainings/GetAllTrainings");

        if (result?.Count > 0)
            TrainingsList = result;
    }

    private async Task DeleteTraining(Trainings trainingToDelete)
    {
        try
        {
            var parameter = new DialogParameters();
            parameter.Add("Message", "Seguro que deseas eliminar este registro");
            var dialog = DialogService.Show<ConfirmationDialog>("Competencias", parameter);
            var resultDialog = await dialog.Result;

            if (!resultDialog.Canceled)
            {
                var result = await HttpClient.DeleteAsync($"api/Trainings/DeleteTraining/{trainingToDelete.Id}");

                if (result.IsSuccessStatusCode)
                {
                    parameter = new DialogParameters();
                    parameter.Add("Message", "Competencia eliminada");
                    dialog = DialogService.Show<SuccessDialog>("Competencia", parameter);
                    resultDialog = await dialog.Result;
                    await GetAllTrainings();
                }
                else
                {
                    throw new Exception(result.StatusCode.ToString());
                }
            }
        }
        catch (Exception ex)
        {
            var parameter = new DialogParameters();
            parameter.Add("Message", ex.Message);
            var dialog = DialogService.Show<ErrorDialog>("Competencia", parameter);
            var resultDialog = await dialog.Result;
        }
    }

    private async Task RowClicked(TableRowClickEventArgs<Trainings> args)
    {
        NavigationManager.NavigateTo($"TrainingForm/{args.Item.Id}");
    }
}
